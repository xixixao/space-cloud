// Generated by CoffeeScript 1.6.2
(function() {
  var LocalStrategy, User, passport, permises, restrict;

  passport = require("passport");

  LocalStrategy = require("passport-local").Strategy;

  User = require('./model').User;

  passport.use(new LocalStrategy({
    usernameField: '_id',
    passwordField: 'password'
  }, function(username, password, done) {
    return User.findById(username, function(err, user) {
      if (err != null) {
        return done(err);
      } else if (user == null) {
        return done(null, false, "User doesn't exist");
      } else if (user.password !== password) {
        return done(null, false, "The password doesn't match the username");
      } else {
        return done(null, user, {
          scope: 'all'
        });
      }
    });
  }));

  passport.serializeUser(function(user, done) {
    return done(null, user._id);
  });

  passport.deserializeUser(function(id, done) {
    return User.findById(id, function(err, user) {
      return done(null, user);
    });
  });

  permises = function(current, wanted) {
    switch (current) {
      case 'w':
        return true;
      case 'r':
        return wanted === 'r';
    }
  };

  restrict = function(request, topic, requiredPermission) {
    var code, permission, _i, _len, _ref, _ref1;

    _ref = request.user.topics;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], code = _ref1.code, permission = _ref1.permission;
      if (code === topic) {
        return permises(permission, requiredPermission);
      }
    }
  };

  module.exports = {
    canWrite: function(request, topic) {
      return restrict(request, topic, 'w');
    },
    canRead: function(request, topic) {
      return restrict(request, topic, 'r');
    },
    authenticated: function(request, response, next) {
      if (request.isAuthenticated()) {
        return next();
      } else {
        return response.send(401, "User is not logged in");
      }
    }
  };

}).call(this);
