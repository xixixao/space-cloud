// Generated by CoffeeScript 1.6.2
(function() {
  var Course, Q, User, app, dbConnect, dbLog, dbModel, dbPopulate, dbWipe, express, mongoose, port, server, _ref;

  mongoose = require('mongoose');

  (require('./mongoose-promise-save'))(mongoose);

  express = require('express');

  Q = require('q');

  (require('./q-each'))(Q);

  app = express();

  port = 3333;

  server = app.listen(port, function() {
    return console.log("Express server listening on port %d in '%s' mode", server.address().port, app.settings.env);
  });

  app.configure(function() {
    app.set('port', port);
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    return app.use(express.compress());
  });

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.all('/server-check', function(request, response) {
    return response.send("Cloud running");
  });

  dbConnect = function() {
    var db;

    mongoose.connect("mongodb://localhost/test");
    db = mongoose.connection;
    return db.on("error", function() {
      return console.error("Unable to connect to the database");
    });
  };

  dbWipe = function() {
    var db;

    db = mongoose.connection;
    return Q.map(db.collections, function(collection) {
      return Q.invoke(collection, 'drop');
    });
  };

  dbModel = function() {
    var Course, Schema, User, courseSchema, userSchema;

    Schema = mongoose.Schema;
    courseSchema = Schema({
      name: String,
      courseCode: Number
    });
    Course = mongoose.model('Course', courseSchema);
    userSchema = Schema({
      name: String,
      courses: [
        {
          type: Schema.Types.ObjectId,
          ref: 'Course'
        }
      ]
    });
    User = mongoose.model('User', userSchema);
    return {
      Course: Course,
      User: User
    };
  };

  dbPopulate = function() {
    var courses, users;

    courses = Q.map([0, 1, 2, 3], function(i) {
      var course;

      course = new Course({
        name: "course " + i,
        courseCode: i
      });
      return course.save();
    });
    users = Q.map([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(i) {
      var user;

      user = new User({
        name: "user" + i
      });
      courses.thenEach(function(course) {
        return user.courses.addToSet(course._id);
      });
      return user.save();
    });
    return Q.all([courses, users]);
  };

  dbLog = function() {
    var courses, users;

    users = User.find().exec().then(function(users) {
      return console.log("  Number of users " + users.length);
    });
    courses = Course.find().exec().then(function(courses) {
      return console.log("  Number of courses " + courses.length);
    });
    return Q.all([users, courses]);
  };

  dbConnect();

  _ref = dbModel(), Course = _ref.Course, User = _ref.User;

  dbWipe().then(function() {
    console.log("After wiping out");
    return dbLog();
  }).then(dbPopulate).then(function() {
    console.log("After populating");
    return dbLog();
  });

  app.get('/users', function(request, response) {
    return response.send(users);
  });

  app.get('/users/:name', function(request, response) {
    return User.find({
      name: request.params.name
    }, function(err, docs) {
      return response.send(docs);
    });
  });

}).call(this);
