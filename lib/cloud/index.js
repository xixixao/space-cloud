// Generated by CoffeeScript 1.6.2
(function() {
  var Course, Schema, User, app, course, courseSchema, db, express, i, j, modules, mongoose, port, server, user, userSchema, users;

  express = require('express');

  app = express();

  port = 3333;

  server = app.listen(port, function() {
    return console.log("Express server listening on port %d in %s mode", server.address().port, app.settings.env);
  });

  app.configure(function() {
    app.set('port', port);
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    return app.use(express.compress());
  });

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.all('/server-check', function(request, response) {
    return response.send("Cloud running");
  });

  mongoose = require('mongoose');

  mongoose.connect("mongodb://localhost/test");

  Schema = mongoose.Schema;

  db = mongoose.connection;

  db.on("error", function() {
    return console.error("of");
  });

  db.once("open", function() {
    return console.log("success");
  });

  courseSchema = Schema({
    name: String,
    courseCode: Number
  });

  userSchema = Schema({
    name: String,
    courses: [
      {
        type: Schema.Types.ObjectId,
        ref: 'Course'
      }
    ]
  });

  Course = mongoose.model('Course', courseSchema);

  User = mongoose.model('User', userSchema);

  modules = (function() {
    var _i, _results;

    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      course = new Course({
        name: "course " + i,
        courseCode: i
      });
      _results.push(course.save(function(err, course) {
        if (err) {
          return console.error(err);
        }
      }));
    }
    return _results;
  })();

  users = (function() {
    var _i, _j, _results;

    _results = [];
    for (i = _i = 0; _i <= 10; i = ++_i) {
      user = new User({
        name: "user" + i
      });
      console.log(modules);
      for (j = _j = 0; _j <= 3; j = ++_j) {
        user.courses.addToSet(modules[j]._id);
      }
      _results.push(user.save(function(err, users) {
        if (err) {
          return console.error(err);
        }
      }));
    }
    return _results;
  })();

  User.find(function(err, users) {
    return console.log(users.length);
  });

  Course.find(function(err, courses) {
    return console.log(courses.length);
  });

  app.get('/users', function(request, response) {
    return response.send(users);
  });

  app.get('/users/:name', function(request, response) {
    return User.find({
      name: request.params.name
    }, function(err, docs) {
      return response.send(docs);
    });
  });

  app.put('/client/create-form', function(request, response) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    return res.end(JSON.stringify(list));
  });

}).call(this);
