// Generated by CoffeeScript 1.6.2
(function() {
  var Course, User, app, collection, course, courseSchema, courses, db, express, i, mongoose, n, port, server, user, userSchema, users, _ref;

  express = require('express');

  app = express();

  port = 3333;

  server = app.listen(port, function() {
    return console.log("Express server listening on port %d in %s mode", server.address().port, app.settings.env);
  });

  app.configure(function() {
    app.set('port', port);
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    return app.use(express.compress());
  });

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.all('/server-check', function(request, response) {
    return response.send("Cloud running");
  });

  mongoose = require('mongoose');

  mongoose.connect("mongodb://localhost/test");

  db = mongoose.connection;

  db.on("error", function() {
    return console.error("of");
  });

  db.once("open", function() {
    return console.log("success");
  });

  courseSchema = mongoose.Schema({
    name: String,
    courseCode: Number
  });

  userSchema = mongoose.Schema({
    name: String,
    courses: [courseSchema]
  });

  Course = mongoose.model('Course', courseSchema);

  User = mongoose.model('User', userSchema);

  _ref = db.collections;
  for (n in _ref) {
    collection = _ref[n];
    collection.drop(function() {
      return console.log("dropped");
    });
  }

  courses = (function() {
    var _i, _results;

    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      course = new Course({
        name: "course " + i,
        courseCode: i
      });
      _results.push(course.save(function(err, course) {
        if (err) {
          return console.error(err);
        }
      }));
    }
    return _results;
  })();

  users = (function() {
    var _i, _results;

    _results = [];
    for (i = _i = 0; _i <= 10; i = ++_i) {
      user = new User({
        name: "user " + i
      });
      _results.push(user.save(function(err, users) {
        if (err) {
          return console.error(err);
        }
      }));
    }
    return _results;
  })();

  User.find(function(err, users) {
    return console.log(users.length);
  });

  Course.find(function(err, courses) {
    return console.log(courses.length);
  });

  app.get('/users', function(request, response) {
    return response.send(users);
  });

  app.get('/users/:name', function(request, response) {
    var _i, _len, _results;

    _results = [];
    for (_i = 0, _len = users.length; _i < _len; _i++) {
      user = users[_i];
      if (user.id === request.params.name) {
        response.send(user);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  app.put('/client/create-form', function(request, response) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    return res.end(JSON.stringify(list));
  });

}).call(this);
