// Generated by CoffeeScript 1.6.2
(function() {
  var Q, connect, defineModels, models, mongoose, populate, printStats, wipe;

  Q = require('q');

  (require('./q-each'))(Q);

  mongoose = require('mongoose');

  (require('./mongoose-promise-save'))(mongoose);

  defineModels = function() {
    var Answer, CommentA, CommentQ, Course, File, Question, Schema, User, answerSchema, commentASchema, commentQSchema, coursePermission, courseSchema, fileSchema, questionSchema, userSchema;

    Schema = mongoose.Schema;
    courseSchema = Schema({
      name: String,
      _id: {
        type: String,
        unique: true
      }
    });
    Course = mongoose.model('Course', courseSchema);
    coursePermission = Schema({
      code: {
        type: String,
        ref: 'Course'
      },
      permission: String
    });
    userSchema = Schema({
      name: String,
      _id: {
        type: String,
        unique: true,
        dropDups: true
      },
      password: String,
      courses: [coursePermission]
    });
    User = mongoose.model('User', userSchema);
    fileSchema = Schema({
      _id: {
        type: String,
        unique: true
      },
      path: String,
      name: String,
      owner: {
        type: String,
        ref: 'User'
      },
      course: {
        type: String,
        ref: 'Course'
      }
    });
    File = mongoose.model('File', fileSchema);
    questionSchema = Schema({
      _id: {
        type: String,
        unique: true
      },
      timestamp: {
        type: Date,
        "default": Date.now
      },
      owner: {
        type: String,
        ref: 'User'
      },
      filePosition: String,
      file: {
        type: String,
        ref: 'File'
      }
    });
    Question = mongoose.model('Question', questionSchema);
    answerSchema = Schema({
      _id: {
        type: String,
        unique: true
      },
      timestamp: {
        type: Date,
        "default": Date.now
      },
      owner: {
        type: String,
        ref: 'User'
      },
      question: {
        type: String,
        ref: 'Question'
      },
      rank: Number
    });
    Answer = mongoose.model('Answer', answerSchema);
    commentQSchema = Schema({
      _id: {
        type: String,
        unique: true
      },
      timestamp: {
        type: Date,
        "default": Date.now
      },
      owner: {
        type: String,
        ref: 'User'
      },
      question: {
        type: String,
        ref: 'Question'
      }
    });
    CommentQ = mongoose.model('CommentQ', commentQSchema);
    commentASchema = Schema({
      _id: {
        type: String,
        unique: true
      },
      timestamp: {
        type: Date,
        "default": Date.now
      },
      owner: {
        type: String,
        ref: 'User'
      },
      answer: {
        type: String,
        ref: 'Answer'
      }
    });
    CommentA = mongoose.model('CommentA', commentASchema);
    return {
      Course: Course,
      User: User,
      File: File,
      Question: Question,
      CommentA: CommentA,
      CommentQ: CommentQ,
      Answer: Answer
    };
  };

  module.exports = models = defineModels();

  connect = function() {
    var db;

    mongoose.connect("mongodb://localhost/test");
    db = mongoose.connection;
    return db.on("error", function(error) {
      return console.error("There has been an error:\n", error);
    });
  };

  wipe = function() {
    var db;

    db = mongoose.connection;
    return Q.map(db.collections, function(collection) {
      return Q.ninvoke(collection, 'drop');
    });
  };

  populate = function(_arg) {
    var Course, User, courses, users;

    Course = _arg.Course, User = _arg.User;
    courses = Q.map([0, 1, 2, 3], function(i) {
      var course;

      course = new Course({
        name: "course " + i,
        _id: i
      });
      return course.save();
    });
    users = Q.map([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(i) {
      var user;

      user = new User({
        name: "user" + i
      });
      courses.thenEach(function(course) {
        return user.courses.addToSet(course._id);
      });
      return user.save();
    });
    return Q.all([courses, users]);
  };

  printStats = function(_arg) {
    var Course, User, courses, users;

    User = _arg.User, Course = _arg.Course;
    users = User.find().exec().then(function(users) {
      return console.log("  Number of users " + users.length);
    });
    courses = Course.find().exec().then(function(courses) {
      return console.log("  Number of courses " + courses.length);
    });
    return Q.all([users, courses]);
  };

  connect();

  wipe();

}).call(this);
