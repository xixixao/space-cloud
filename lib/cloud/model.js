// Generated by CoffeeScript 1.6.2
(function() {
  var Q, connect, defineModels, models, mongoose, wipe;

  Q = require('q');

  (require('./q-each'))(Q);

  mongoose = require('mongoose');

  (require('./mongoose-promise-save'))(mongoose);

  defineModels = function() {
    var Answer, CommentA, CommentQ, Event, File, Question, Schema, Topic, User, answerSchema, commentASchema, commentQSchema, eventSchema, fileSchema, questionSchema, topicPermission, topicSchema, userSchema;

    Schema = mongoose.Schema;
    topicPermission = Schema({
      code: {
        type: String,
        ref: 'Topic'
      },
      permission: String
    });
    eventSchema = Schema({
      type: String,
      url: String,
      model: String,
      timestamp: {
        type: Date,
        "default": Date.now
      },
      topicCode: {
        type: String,
        ref: 'Topic'
      }
    });
    Event = mongoose.model('Event', eventSchema);
    userSchema = Schema({
      name: String,
      _id: {
        type: String,
        unique: true,
        dropDups: true
      },
      password: String,
      email: String,
      facebook: String,
      topics: [topicPermission]
    });
    User = mongoose.model('User', userSchema);
    commentASchema = Schema({
      timestamp: {
        type: Date,
        "default": Date.now
      },
      owner: {
        type: String,
        ref: 'User'
      },
      text: String
    });
    CommentA = mongoose.model('CommentA', commentASchema);
    answerSchema = Schema({
      timestamp: {
        type: Date,
        "default": Date.now
      },
      owner: {
        type: String,
        ref: 'User'
      },
      rank: Number,
      comments: [commentASchema],
      text: String,
      votesFor: [userSchema],
      votesAgainst: [userSchema]
    });
    Answer = mongoose.model('Answer', answerSchema);
    commentQSchema = Schema({
      timestamp: {
        type: Date,
        "default": Date.now
      },
      owner: {
        type: String,
        ref: 'User'
      },
      text: String
    });
    CommentQ = mongoose.model('CommentQ', commentQSchema);
    questionSchema = Schema({
      createdTime: {
        type: Date,
        "default": Date.now
      },
      modifiedQuestionTime: {
        type: Date,
        "default": Date.now
      },
      modifiedTime: {
        type: Date,
        "default": Date.now
      },
      owner: {
        type: String,
        ref: 'User'
      },
      filePosition: String,
      answers: [answerSchema],
      comments: [commentQSchema],
      text: String
    });
    Question = mongoose.model('Question', questionSchema);
    fileSchema = Schema({
      _id: {
        type: String,
        unique: true
      },
      path: String,
      name: String,
      owner: {
        type: String,
        ref: 'User'
      },
      topicCode: {
        type: String,
        ref: 'Topic'
      },
      questions: [questionSchema],
      type: String
    });
    File = mongoose.model('File', fileSchema);
    topicSchema = Schema({
      name: String,
      _id: {
        type: String,
        unique: true
      },
      files: [fileSchema],
      types: [String]
    });
    Topic = mongoose.model('Topic', topicSchema);
    return {
      Topic: Topic,
      User: User,
      File: File,
      Question: Question,
      CommentA: CommentA,
      CommentQ: CommentQ,
      Answer: Answer,
      Event: Event
    };
  };

  module.exports = models = defineModels();

  connect = function() {
    var db;

    mongoose.connect("mongodb://localhost/test");
    db = mongoose.connection;
    return db.on("error", function(error) {
      return console.error("DB error:(are you running the database?)\n", error);
    });
  };

  wipe = function() {
    var db;

    db = mongoose.connection;
    return Q.map(db.collections, function(collection) {
      return Q.ninvoke(collection, 'drop');
    });
  };

  module.exports.wipe = wipe;

  connect();

  wipe();

}).call(this);
