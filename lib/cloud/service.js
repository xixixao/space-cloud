// Generated by CoffeeScript 1.6.2
(function() {
  var Answer, CommentA, CommentQ, Event, File, Model, Q, Question, Topic, User, authenticated, canRead, canWrite, fs, mkdirp, passport, path, _ref, _ref1;

  Q = require('q');

  (require('./q-each'))(Q);

  passport = require("passport");

  _ref = Model = require('./model'), Topic = _ref.Topic, User = _ref.User, File = _ref.File, CommentA = _ref.CommentA, CommentQ = _ref.CommentQ, Question = _ref.Question, Answer = _ref.Answer, Event = _ref.Event;

  _ref1 = require('./authentication'), canRead = _ref1.canRead, canWrite = _ref1.canWrite, authenticated = _ref1.authenticated;

  path = require('path');

  fs = require('fs');

  mkdirp = Q.denodeify(require('mkdirp'));

  module.exports = function(app) {
    var addEvent, batchUserData, findAnswer, findCommentA, findCommentQ, findFile, findQuestion, findTopic, fromArrayToMap, getAnswer, getEvents, getOwners, getTopic, objectify, populateOwner, shallowUser, usersFiles;

    app.get('/users/:username', authenticated, function(request, response) {
      return usersFiles(request.params.username).then(function(user) {
        return response.send(user);
      }, function(error) {
        return response.send(error);
      });
    });
    usersFiles = function(userId) {
      return Q.ninvoke(User, 'findById', userId).then(function(user) {
        return Q.ninvoke(user, 'populate', 'topics.code');
      }).then(function(user) {
        var fileLists, topicPermissions;

        user = user.toObject();
        topicPermissions = user.topics;
        fileLists = Q.map(topicPermissions, function(_arg) {
          var code, topicId;

          code = _arg.code;
          topicId = code._id;
          return Q.ninvoke(File, 'find', {
            topicCode: topicId
          });
        });
        return fileLists.thenEach(function(files, i) {
          return user.topics[i].code.files = files;
        }).then(function() {
          return user;
        });
      });
    };
    app.get('/files/:topicId/:fileName', authenticated, function(request, response) {
      var fileName, topicId, _ref2;

      _ref2 = request.params, topicId = _ref2.topicId, fileName = _ref2.fileName;
      return response.sendfile(path.join(__dirname, "files/" + topicId + "/" + fileName), function(err) {
        return response.send(404, "File not found");
      });
    });
    app.post('/users', function(request, response) {
      var user;

      user = new User({
        name: request.body.name,
        _id: request.body._id,
        password: request.body.password,
        email: request.body.email,
        facebook: request.body.facebook,
        topics: request.body.topics
      });
      return user.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(user);
        }
      });
    });
    fromArrayToMap = function(idKey, array) {
      var element, result, _i, _len;

      result = {};
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        element = array[_i];
        result[element[idKey]] = element;
      }
      return result;
    };
    objectify = function(topic) {
      var answer, file, question, _i, _j, _k, _len, _len1, _len2, _ref2, _ref3, _ref4;

      _ref2 = topic.files;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        file = _ref2[_i];
        _ref3 = file.questions;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          question = _ref3[_j];
          _ref4 = question.answers;
          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            answer = _ref4[_k];
            answer.comments = fromArrayToMap('_id', answer.comments);
          }
          question.comments = fromArrayToMap('_id', question.comments);
          question.answers = fromArrayToMap('_id', question.answers);
        }
        file.questions = fromArrayToMap('_id', file.questions);
      }
      topic.files = fromArrayToMap('_id', topic.files);
      return topic;
    };
    getOwners = function(user) {
      var fileOwners;

      return fileOwners = Q.map(user.topics, function(_arg) {
        var code;

        code = _arg.code;
        return Q.all([
          Q.ninvoke(File, 'populate', code.files, {
            path: 'owner',
            select: '_id name'
          }), Q.map(code.files, function(file) {
            return Q.all([
              Q.ninvoke(Question, 'populate', file.questions, {
                path: 'owner',
                select: '_id name'
              }), Q.map(file.questions, function(question) {
                return Q.all([
                  Q.ninvoke(CommentQ, 'populate', question.comments, {
                    path: 'owner',
                    select: '_id name'
                  }), Q.ninvoke(Answer, 'populate', question.answers, {
                    path: 'owner',
                    select: '_id name'
                  }), Q.map(question.answers, function(answer) {
                    return Q.ninvoke(CommentA, 'populate', answer.comments, {
                      path: 'owner',
                      select: '_id name'
                    });
                  })
                ]);
              })
            ]);
          })
        ]);
      });
    };
    batchUserData = function(request, response) {
      var events, topicCodes, topics;

      topicCodes = request.user.topics;
      events = getEvents(topicCodes);
      topics = Q.ninvoke(request.user, 'populate', 'topics.code').then(function(user) {
        return Q.map(user.topics, function(_arg) {
          var code, permission;

          code = _arg.code, permission = _arg.permission;
          return Q.map(code.files, function(file) {
            return file.shallow().then(function(file) {
              file.url = {
                topicId: code._id,
                fileId: file._id
              };
              return file;
            });
          }).then(function(files) {
            return code.shallow().then(function(topic) {
              topic.permission = permission;
              topic.files = files;
              return topic;
            });
          });
        });
      });
      return Q.all([events, topics]).then(function(_arg) {
        var events, topics, user;

        events = _arg[0], topics = _arg[1];
        user = request.user.toObject();
        user.topics = topics;
        user.events = events;
        return response.send(user);
      }, function(error) {
        return response.send(error);
      }).done();
    };
    app.post('/login', passport.authenticate('local'), function(request, response) {
      return batchUserData(request, response);
    });
    app.get('/data', authenticated, function(request, response) {
      return batchUserData(request, response);
    });
    app.post('/users/:username', authenticated, function(request, response) {
      if (request.user._id !== request.params.username) {
        return response.send(401, "User doesn't have permissions");
      }
      return User.update(request.user, {
        name: request.body.name,
        password: request.body.password,
        email: request.body.email,
        facebook: request.body.facebook
      }, function(err, numberAffected, res) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(request.user);
        }
      });
    });
    app.post('/topics', function(request, response) {
      var topic;

      topic = new Topic({
        name: request.body.name,
        _id: request.body._id,
        files: [],
        types: request.body.types
      });
      return topic.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(topic);
        }
      });
    });
    app.post('/topics/:topicId', function(request, response) {
      if (!canWrite(request, request.params.topicId)) {
        return response.send(401, 'User doesnt have write permission');
      }
      return getTopic(request.params.topicId).then(function(topic) {
        topic.types = request.body.types;
        console.log(topic.types);
        return Q.ninvoke(topic, 'save');
      }).then(function(topic) {
        console.log(topic.types);
        return response.send(topic);
      }, function(error) {
        return response.send(500, error);
      }).done();
    });
    app.get('/topics/:code', authenticated, function(request, response) {
      return getTopic(request.params.code).then(function(topic) {
        topic = topic.toObject();
        topic.permission = (function() {
          var code, permission, _i, _len, _ref2, _ref3;

          _ref2 = request.user.topics;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            _ref3 = _ref2[_i], code = _ref3.code, permission = _ref3.permission;
            if (code === topic._id) {
              return permission;
            }
          }
        })();
        return response.send(topic);
      }, function(error) {
        return response.send(error);
      });
    });
    getTopic = function(topicId) {
      return Q.ninvoke(Topic, 'findById', topicId).then(function(topic) {
        return topic;
      });
    };
    addEvent = function(type, model, topicCode, url) {
      var event;

      event = new Event({
        model: model,
        type: type,
        topicCode: topicCode,
        url: url
      });
      return event.save(function(err) {
        if (err != null) {
          return err;
        } else {
          return event;
        }
      });
    };
    app.get('/events', authenticated, function(request, response) {
      return getEvents(request.user.topics).then(function(events) {
        return response.send(events);
      }, function(error) {
        return response.send(500, error);
      }).done();
    });
    getEvents = function(topics) {
      var code, query, topicCodes;

      topicCodes = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = topics.length; _i < _len; _i++) {
          code = topics[_i].code;
          _results.push(code);
        }
        return _results;
      })();
      query = Event.find({}).where('topicCode')["in"](topicCodes).sort('-timestamp').limit(100);
      return Q.ninvoke(query, 'exec').then(function(events) {
        return Q.map(events, function(event, i) {
          event = event.toObject();
          event.url.topicId = event.topicCode;
          return Model.named(event.model).findShallowByURL(event.url).then(function(target) {
            event.target = target;
            return event;
          }, function(error) {
            return null;
          });
        });
      }).then(function(events) {
        var event, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          event = events[_i];
          if (event != null) {
            _results.push(event);
          }
        }
        return _results;
      });
    };
    app.get('/questions', authenticated, function(request, response) {
      var all, code, query, topicCodes;

      topicCodes = (function() {
        var _i, _len, _ref2, _results;

        _ref2 = request.user.topics;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          code = _ref2[_i].code;
          _results.push(code);
        }
        return _results;
      })();
      query = Topic.find({}).where('_id')["in"](topicCodes).select('name files._id files.name files.questions').sort('-modifiedTime').limit(100);
      all = [];
      return Q.ninvoke(query, 'exec').then(function(topics) {
        return Q.map(topics, function(topic) {
          var t;

          t = topic.shallow();
          return Q.map(topic.files, function(file) {
            var f;

            f = file.shallow();
            return Q.map(file.questions, function(question) {
              return Q.all([question.shallow(), f, t]).then(function(_arg) {
                var file, question, topic;

                question = _arg[0], file = _arg[1], topic = _arg[2];
                question.file = file;
                question.topic = topic;
                question.url = {
                  topicId: topic._id,
                  fileId: file._id,
                  questionId: question._id
                };
                return all.push(question);
              });
            });
          });
        });
      }).then(function() {
        return response.send(all);
      }, function(error) {
        throw error;
        return response.send(500, error);
      }).done();
    });
    findTopic = function(_arg) {
      var topicId;

      topicId = _arg.topicId;
      return Q.ninvoke(Topic, 'findById', topicId).then(function(topic) {
        if (topic == null) {
          throw [404, "topic not found " + topicId];
        }
        return topic;
      });
    };
    app.get('/topics/:topicId/files', authenticated, function(request, response) {
      return findTopic(request.params).then(function(topic) {
        return response.send(topic.files);
      }, function(error) {
        return response.send(error);
      }).done();
    });
    app.post('/topics/:topicId/upload', authenticated, function(request, response) {
      return response.send((function() {
        var file, files, _i, _len, _results;

        files = Array.isArray(request.files.form.files[0]) ? request.files.form.files[0] : request.files.form.files;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          _results.push({
            tmpName: path.basename(file.path)
          });
        }
        return _results;
      })());
    });
    app.post('/topics/:topicId/files', authenticated, function(request, response) {
      var file, fileSavePath, fileSaved, topicDir, topicPath;

      if (!canWrite(request, request.params.topicId)) {
        return response.send(401, 'User doesnt have write permission');
      }
      topicDir = "files/" + request.params.topicId + "/";
      topicPath = path.join(__dirname, topicDir);
      fileSavePath = path.join(topicDir, request.body.name);
      fileSaved = mkdirp(topicDir).then(function() {
        return fs.renameSync(path.join(app.get('uploadDir'), request.body.tmpName), path.join(__dirname, fileSavePath));
      });
      file = new File({
        _id: request.body._id,
        path: topicDir + request.body.name,
        name: request.body.name,
        owner: request.user._id,
        type: request.body.type,
        date: request.body.date
      });
      return findTopic(request.params).then(function(topic) {
        topic.files.addToSet(file);
        addEvent("Added", "File", request.params.topicId, {
          fileId: file._id
        });
        return Q.ninvoke(topic, 'save').then(function() {
          return response.send(file);
        }, function(error) {
          throw error;
          return response.send(500, error);
        }).done();
      }).done();
    });
    findFile = function(request, _arg) {
      var fileId, topicId;

      topicId = _arg.topicId, fileId = _arg.fileId;
      return findTopic({
        topicId: topicId
      }).then(function(topic) {
        if (!canRead(request, topicId)) {
          throw [401, "cant read"];
        }
        return [topic, topic.files.id(fileId)];
      });
    };
    app.get('/topics/:topicId/files/:fileId', authenticated, function(request, response) {
      return findFile(request, request.params).then(function(_arg) {
        var file, topic;

        topic = _arg[0], file = _arg[1];
        return response.send(file);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app["delete"]('/topics/:topicId/files/:fileId', authenticated, function(request, response) {
      return findFile(request, request.params).then(function(_arg) {
        var file, topic;

        topic = _arg[0], file = _arg[1];
        topic.files.pull(file);
        topic.save();
        return response.send(topic);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.post('/topics/:topicId/files/:fileId', authenticated, function(request, response) {
      return findFile(request, request.params).then(function(_arg) {
        var file, topic;

        topic = _arg[0], file = _arg[1];
        file.name = request.body.name;
        file.path = request.body.path;
        file.date = request.body.date;
        return Q.ninvoke(topic, 'save').then(function() {
          addEvent("Modified", "File", request.params.topicId, {
            fileId: request.params.fileId
          });
          return response.send(file);
        }, function(error) {
          return response.send(error);
        }).done();
      }).done();
    });
    shallowUser = function(request) {
      var name, _id, _ref2;

      _ref2 = request.user, _id = _ref2._id, name = _ref2.name;
      return {
        _id: _id,
        name: name
      };
    };
    app.post('/topics/:topicId/files/:fileId/questions', authenticated, function(request, response) {
      var question;

      question = new Question({
        owner: request.user._id,
        position: request.body.position,
        text: request.body.text,
        createdTime: new Date(),
        modifiedTime: new Date()
      });
      return Q.ninvoke(question, 'generateId').then(function() {
        return findFile(request, request.params);
      }).then(function(_arg) {
        var file, topic;

        topic = _arg[0], file = _arg[1];
        file.questions.addToSet(question);
        return Q.ninvoke(topic, 'save');
      }).then(function() {
        addEvent("Added", "Question", request.params.topicId, {
          fileId: request.params.fileId,
          questionId: question._id
        });
        question = question.toObject();
        question.owner = shallowUser(request);
        return response.send(question);
      }, function(error) {
        throw error;
        return response.send.apply(response, error);
      }).done();
    });
    app["delete"]('/topics/:topicId/files/:fileId/questions/:questionId', authenticated, function(request, response) {
      return findQuestion(request, request.params).then(function(_arg) {
        var file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2];
        file.questions.pull(question);
        return response.send(file);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.post('/topics/:topicId/files/:fileId/questions/:questionId', authenticated, function(request, response) {
      return findQuestion(request, request.params).then(function(_arg) {
        var file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2];
        question.text = request.body.text;
        question.modifiedQuestionTime = new Date();
        return Q.ninvoke(topic, 'save').then(function() {
          addEvent("Modified", "Question", request.params.topicId, {
            fileId: request.params.fileId,
            questionId: question._id
          });
          return response.send(question);
        }, function(error) {
          return response.send(error);
        }).done();
      }).done();
    });
    findQuestion = function(request, _arg) {
      var fileId, questionId, topicId;

      topicId = _arg.topicId, fileId = _arg.fileId, questionId = _arg.questionId;
      return findFile(request, {
        topicId: topicId,
        fileId: fileId
      }).then(function(_arg1) {
        var file, question, topic;

        topic = _arg1[0], file = _arg1[1];
        question = file.questions.id(questionId);
        return [topic, file, question];
      });
    };
    app.get('/topics/:topicId/files/:fileId/questions', authenticated, function(request, response) {
      return findQuestion(request, request.params).then(function(_arg) {
        var file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2];
        return Q.map(file.questions, function(question) {
          return question.shallow();
        });
      }).then(function(questions) {
        return response.send(questions);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.get('/topics/:topicId/files/:fileId/questions/:questionId', authenticated, function(request, response) {
      return findQuestion(request, request.params).then(function(_arg) {
        var file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2];
        return populateOwner(Question, 'owner comments.owner answers.owner answers.comments.owner', question);
      }).then(function(question) {
        return response.send(question);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.post('/topics/:topicId/files/:fileId/questions/:questionId/answers', authenticated, function(request, response) {
      var answer;

      answer = new Answer({
        owner: request.user._id,
        rank: request.body.rank,
        text: request.body.text
      });
      answer.priority = canWrite(request, request.params.topicId) ? 1 : 0;
      return Q.ninvoke(answer, 'generateId').then(function() {
        return findQuestion(request, request.params);
      }).then(function(_arg) {
        var file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2];
        question.answers.addToSet(answer);
        question.modifiedTime = new Date();
        return Q.ninvoke(topic, 'save').then(function() {
          addEvent("Added", "Answer", request.params.topicId, {
            fileId: request.params.fileId,
            questionId: request.params.questionId,
            answerId: answer._id
          });
          answer = answer.toObject();
          answer.owner = shallowUser(request);
          return response.send(answer);
        });
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.post('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId', authenticated, function(request, response) {
      return findAnswer(request, request.params).then(function(_arg) {
        var answer, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3];
        answer.text = request.body.text;
        question.modifiedTime = new Date();
        return Q.ninvoke(topic, 'save').then(function() {
          addEvent("Modified", "Answer", request.params.topicId, {
            fileId: request.params.fileId,
            questionId: request.params.questionId,
            answerId: answer._id
          });
          return response.send(answer);
        }, function(error) {
          return response.send(error);
        }).done();
      }).done();
    });
    findAnswer = function(request, _arg) {
      var answerId, fileId, questionId, topicId;

      topicId = _arg.topicId, fileId = _arg.fileId, questionId = _arg.questionId, answerId = _arg.answerId;
      return findQuestion(request, {
        topicId: topicId,
        fileId: fileId,
        questionId: questionId
      }).then(function(_arg1) {
        var answer, file, question, topic;

        topic = _arg1[0], file = _arg1[1], question = _arg1[2];
        answer = question.answers.id(answerId);
        return [topic, file, question, answer];
      });
    };
    app.get('/topics/:topicId/files/:fileId/questions/:questionId/answers', authenticated, function(request, response) {
      return findAnswer(request, request.params).then(function(_arg) {
        var answer, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3];
        return response.send(question.answers);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.get('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId', authenticated, function(request, response) {
      return findAnswer(request, request.params).then(function(_arg) {
        var answer, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3];
        return populateOwner(Answer, 'owner comments.owner', answer).then(function(answer) {
          return response.send(answer);
        });
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.post('/topics/:topicId/files/:fileId/questions/:questionId/comments', authenticated, function(request, response) {
      var comment;

      comment = new CommentQ({
        owner: request.user._id,
        text: request.body.text
      });
      return Q.ninvoke(comment, 'generateId').then(function() {
        return findQuestion(request, request.params);
      }).then(function(_arg) {
        var file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2];
        question.comments.addToSet(comment);
        question.modifiedTime = new Date();
        return Q.ninvoke(topic, 'save');
      }).then(function() {
        addEvent("Added", "CommentQ", request.params.topicId, {
          fileId: request.params.fileId,
          questionId: request.params.questionId,
          commentId: comment._id
        });
        comment = comment.toObject();
        comment.owner = shallowUser(request);
        return response.send(comment);
      }, function(error) {
        return response.send(error);
      }).done();
    });
    app.post('/topics/:topicId/files/:fileId/questions/:questionId/comments/:commentId', authenticated, function(request, response) {
      return findCommentQ(request, request.params).then(function(_arg) {
        var comment, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], comment = _arg[3];
        comment.text = request.body.text;
        question.modifiedTime = new Date();
        return Q.ninvoke(topic, 'save').then(function() {
          addEvent("Modified", "CommentQ", request.params.topicId, {
            fileId: request.params.fileId,
            questionId: request.params.questionId,
            commentId: comment._id
          });
          return response.send(comment);
        }, function(error) {
          return response.send(error);
        }).done();
      }).done();
    });
    findCommentQ = function(request, _arg) {
      var commentId, fileId, questionId, topicId;

      topicId = _arg.topicId, fileId = _arg.fileId, questionId = _arg.questionId, commentId = _arg.commentId;
      return findQuestion(request, {
        topicId: topicId,
        fileId: fileId,
        questionId: questionId
      }).then(function(_arg1) {
        var comment, file, question, topic;

        topic = _arg1[0], file = _arg1[1], question = _arg1[2];
        comment = question.comments.id(commentId);
        return [topic, file, question, comment];
      });
    };
    app.get('/topics/:topicId/files/:fileId/questions/:questionId/comments', authenticated, function(request, response) {
      return findCommentQ(request, request.params).then(function(_arg) {
        var comment, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], comment = _arg[3];
        return response.send(question.comments);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.get('/topics/:topicId/files/:fileId/questions/:questionId/comments/:commentId', authenticated, function(request, response) {
      return findCommentQ(request, request.params).then(function(_arg) {
        var comment, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], comment = _arg[3];
        return populateOwner(CommentQ, 'owner', comment).then(function(comment) {
          return response.send(comment);
        });
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.post('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId/comments', authenticated, function(request, response) {
      var comment;

      comment = new CommentA({
        owner: request.user._id,
        text: request.body.text
      });
      return Q.ninvoke(comment, 'generateId').then(function() {
        return findAnswer(request, request.params);
      }).then(function(_arg) {
        var answer, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3];
        answer.comments.addToSet(comment);
        question.modifiedTime = new Date();
        return Q.ninvoke(topic, 'save');
      }).then(function() {
        addEvent("Added", "CommentA", request.params.topicId, {
          fileId: request.params.fileId,
          questionId: request.params.questionId,
          answerId: request.params.answerId,
          commentId: comment._id
        });
        comment = comment.toObject();
        comment.owner = shallowUser(request);
        return response.send(comment);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.post('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId/comments/:commentId', authenticated, function(request, response) {
      return findCommentA(request, request.params).then(function(_arg) {
        var answer, comment, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3], comment = _arg[4];
        comment.text = request.body.text;
        question.modifiedTime = new Date();
        return Q.ninvoke(topic, 'save').then(function() {
          addEvent("Modified", "CommentA", request.params.topicId, {
            fileId: request.params.fileId,
            questionId: request.params.questionId,
            answerId: request.params.answerId,
            commentId: comment._id
          });
          return response.send(comment);
        }, function(error) {
          return response.send(error);
        }).done();
      }).done();
    });
    populateOwner = function(model, path, type) {
      return Q.ninvoke(model, 'populate', type, {
        path: path,
        select: '_id name'
      });
    };
    findCommentA = function(request, _arg) {
      var answerId, commentId, fileId, questionId, topicId;

      topicId = _arg.topicId, fileId = _arg.fileId, questionId = _arg.questionId, answerId = _arg.answerId, commentId = _arg.commentId;
      return findAnswer(request, {
        topicId: topicId,
        fileId: fileId,
        questionId: questionId,
        answerId: answerId
      }).then(function(_arg1) {
        var answer, comment, file, question, topic;

        topic = _arg1[0], file = _arg1[1], question = _arg1[2], answer = _arg1[3];
        comment = answer.comments.id(commentId);
        return [topic, file, question, answer, comment];
      });
    };
    app.get('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId/comments', authenticated, function(request, response) {
      return findCommentA(request, request.params).then(function(_arg) {
        var answer, comment, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3], comment = _arg[4];
        return response.send(answer.comments);
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.get('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId/comments/:commentId', authenticated, function(request, response) {
      return findCommentA(request, request.params).then(function(_arg) {
        var answer, comment, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3], comment = _arg[4];
        return populateOwner(CommentA, 'owner', comment).then(function(comment) {
          return response.send(comment);
        });
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.get('/feeds/:user', authenticated, function(request, response) {
      return Q.ninvoke(User.findById(request.params.user).select('topics.code'), 'exec').then(function(_arg) {
        var code, topicCodes, topics;

        topics = _arg.topics;
        topicCodes = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = topics.length; _i < _len; _i++) {
            code = topics[_i].code;
            _results.push(code);
          }
          return _results;
        })();
        return Q.ninvoke(Question.find({}).populate({
          path: 'file',
          match: {
            topicCode: {
              $in: topicCodes
            }
          }
        }).sort('-modifiedTime'), 'exec').then(function(questions) {
          var q, _i, _len, _results;

          _results = [];
          for (_i = 0, _len = questions.length; _i < _len; _i++) {
            q = questions[_i];
            if (q.file != null) {
              _results.push(q);
            }
          }
          return _results;
        });
      }).then(function(questions) {
        return response.send(questions);
      }).done();
    });
    getAnswer = function(request, requestParams) {
      return findAnswer(request, request.params).then(function(_arg) {
        var answer, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3];
        return answer;
      });
    };
    app.post('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId/voteUp/:username', authenticated, function(request, response) {
      return findAnswer(request, request.params).then(function(_arg) {
        var answer, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3];
        answer.votesFor.addToSet(request.params.username);
        return Q.ninvoke(topic, 'save');
      }).then(function() {
        return response.send("voted for");
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
    app.get('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId/voteUp', authenticated, function(request, response) {
      return getAnswer(request, request.params).then(function(answer) {
        return response.send(answer.votesFor);
      });
    });
    return app.post('/topics/:topicId/files/:fileId/questions/:questionId/answers/:answerId/voteDown/:username', authenticated, function(request, response) {
      return findAnswer(request, request.params).then(function(_arg) {
        var answer, file, question, topic;

        topic = _arg[0], file = _arg[1], question = _arg[2], answer = _arg[3];
        answer.votesFor.pull(request.params.username);
        return Q.ninvoke(topic, 'save');
      }).then(function() {
        return response.send("voted against");
      }, function(error) {
        return response.send.apply(response, error);
      }).done();
    });
  };

}).call(this);
