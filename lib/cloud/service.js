// Generated by CoffeeScript 1.6.2
(function() {
  var Answer, CommentA, CommentQ, Event, File, Q, Question, Topic, User, authenticated, canRead, canWrite, passport, _ref, _ref1;

  Q = require('q');

  (require('./q-each'))(Q);

  passport = require("passport");

  _ref = require('./model'), Topic = _ref.Topic, User = _ref.User, File = _ref.File, CommentA = _ref.CommentA, CommentQ = _ref.CommentQ, Question = _ref.Question, Answer = _ref.Answer, Event = _ref.Event;

  _ref1 = require('./authentication'), canRead = _ref1.canRead, canWrite = _ref1.canWrite, authenticated = _ref1.authenticated;

  module.exports = function(app) {
    var addEvent, usersFiles;

    app.get('/users/:login', function(request, response) {
      return usersFiles(request.params.login).then(function(user) {
        return response.send(user);
      }, function(error) {
        return response.send(error);
      });
    });
    usersFiles = function(userId) {
      return Q.ninvoke(User, 'findById', userId).then(function(user) {
        return Q.ninvoke(user, 'populate', 'topics.code');
      }).then(function(user) {
        var fileLists, topicPermissions;

        user = user.toObject();
        topicPermissions = user.topics;
        fileLists = Q.map(topicPermissions, function(_arg) {
          var code, topicId;

          code = _arg.code;
          topicId = code._id;
          return Q.ninvoke(File, 'find', {
            topicCode: topicId
          });
        });
        return fileLists.thenEach(function(files, i) {
          return user.topics[i].code.files = files;
        }).then(function() {
          return user;
        });
      });
    };
    app.post('/users', function(request, response) {
      var user;

      user = new User({
        name: request.body.name,
        _id: request.body._id,
        password: request.body.password,
        topics: request.body.topics
      });
      return user.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(user);
        }
      });
    });
    app.post('/login', passport.authenticate('local'), function(request, response) {
      return response.send("logged in");
    });
    app.post('/topics', function(request, response) {
      var topic;

      topic = new Topic({
        name: request.body.name,
        _id: request.body._id
      });
      return topic.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(topic);
        }
      });
    });
    app.get('/topics/:code', function(request, response) {
      var topicCode;

      topicCode = request.params.code;
      return Topic.findById(topicCode, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/users/:login', function(request, response) {
      return User.findById(request.params.login, function(err, user) {
        var topic, topics, _i, _len;

        if (err != null) {
          return response.send(err);
        } else {
          topics = request.body.topics;
          for (_i = 0, _len = topics.length; _i < _len; _i++) {
            topic = topics[_i];
            user.topics.addToSet(topic);
          }
          return response.send(user);
        }
      });
    });
    addEvent = function(type, model, link) {
      var event;

      event = new Event({
        model: model,
        type: type,
        link: link
      });
      return event.save(function(err) {
        if (err != null) {
          return err;
        } else {
          return event;
        }
      });
    };
    app.get('/events', function(request, response) {
      return Event.find({}).sort('-timestamp').exec(function(err, events) {
        if (err != null) {
          return response.send(err);
        } else {
          return Q.map(events, function(event) {
            return Q.ninvoke(event, 'populate', {
              model: event.model,
              path: 'link'
            });
          }).then(function(events) {
            return response.send(events);
          });
        }
      });
    });
    app.post('/files', authenticated, function(request, response) {
      var file;

      if (!canWrite(request, request.body.topicCode)) {
        return response.send(401, 'User doesnt have write permission');
      }
      file = new File({
        _id: request.body._id,
        path: request.body.path,
        name: request.body.name,
        owner: request.body.owner,
        topicCode: request.body.topicCode
      });
      return file.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          addEvent("Added", "File", file._id);
          return response.send(file);
        }
      });
    });
    app.get('/files/:code', authenticated, function(request, response) {
      return File.findById(request.params.code, function(err, file) {
        if ((err != null) || (file == null)) {
          return response.send(404, "not found");
        } else if (!canRead(request, file.topicCode)) {
          return response.send(401, "cant read");
        } else {
          return response.send(file);
        }
      });
    });
    app.post('/questions', function(request, response) {
      var question;

      question = new Question({
        _id: request.body._id,
        owner: request.body.owner,
        filePosition: request.body.filePosition,
        file: request.body.file,
        text: request.body.text
      });
      return question.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          addEvent("Added", "Question", question._id);
          return response.send(question);
        }
      });
    });
    app.get('/questions/:code', function(request, response) {
      return Question.findById(request.params.code, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/answers', function(request, response) {
      var answer;

      answer = new Answer({
        _id: request.body._id,
        owner: request.body.owner,
        question: request.body.question,
        rank: request.body.rank,
        text: request.body.text
      });
      return answer.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          Q.ninvoke(Question, 'findById', request.body.question).then(function(question) {
            question.answers.addToSet(answer);
            question.modifiedTime = answer.timestamp;
            return question.save();
          });
          addEvent("Added", "Answer", answer._id);
          return response.send(answer);
        }
      });
    });
    app.get('/answers/:code', function(request, response) {
      return Answer.findById(request.params.code, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/commentsQ', function(request, response) {
      var comment;

      comment = new CommentQ({
        _id: request.body._id,
        owner: request.body.owner,
        question: request.body.question,
        text: request.body.text
      });
      return comment.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          Q.ninvoke(Question, 'findById', request.body.question).then(function(question) {
            question.comments.addToSet(comment);
            question.modifiedTime = comment.timestamp;
            return question.save();
          });
          addEvent("Added", "CommentQ", comment._id);
          return response.send(comment);
        }
      });
    });
    app.get('/commentsQ/:code', function(request, response) {
      return CommentQ.find({
        _id: request.params.code
      }, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/commentsA', function(request, response) {
      var comment;

      comment = new CommentA({
        _id: request.body._id,
        owner: request.body.owner,
        answer: request.body.answer,
        text: request.body.text
      });
      return comment.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          Q.ninvoke(Answer, 'findById', request.body.answer).then(function(answer) {
            answer.comments.addToSet(comment);
            return answer.save();
          });
          addEvent("Added", "CommentA", comment._id);
          return response.send(comment);
        }
      });
    });
    app.get('/commentsA/:code', function(request, response) {
      return CommentA.find({
        _id: request.params.code
      }, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    return app.get('/feeds/:user', function(request, response) {
      return Q.ninvoke(User.findById(request.params.user).select('topics.code'), 'exec').then(function(_arg) {
        var code, topicCodes, topics;

        topics = _arg.topics;
        topicCodes = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = topics.length; _i < _len; _i++) {
            code = topics[_i].code;
            _results.push(code);
          }
          return _results;
        })();
        return Q.ninvoke(Question.find({}).populate({
          path: 'file',
          match: {
            topicCode: {
              $in: topicCodes
            }
          }
        }).sort('-modifiedTime'), 'exec').then(function(questions) {
          var q, _i, _len, _results;

          _results = [];
          for (_i = 0, _len = questions.length; _i < _len; _i++) {
            q = questions[_i];
            if (q.file != null) {
              _results.push(q);
            }
          }
          return _results;
        });
      }).then(function(questions) {
        return response.send(questions);
      }).done();
    });
  };

}).call(this);
