// Generated by CoffeeScript 1.6.2
(function() {
  var Answer, CommentA, CommentQ, File, Q, Question, Topic, User, _ref;

  Q = require('q');

  (require('./q-each'))(Q);

  _ref = require('./model'), Topic = _ref.Topic, User = _ref.User, File = _ref.File, CommentA = _ref.CommentA, CommentQ = _ref.CommentQ, Question = _ref.Question, Answer = _ref.Answer;

  module.exports = function(app) {
    app.get('/users/:login', function(request, response) {
      return User.findOne({
        _id: request.params.login
      }, function(err, user) {
        if (err != null) {
          return response.send(err);
        } else {
          return user.populate('topics.code', function(err, user) {
            var files, topicPermissions;

            user = user.toObject();
            topicPermissions = user.topics;
            files = Q.map(topicPermissions, function(_arg) {
              var code, topicId;

              code = _arg.code;
              topicId = code._id;
              return Q.ninvoke(File, 'find', {
                topic: topicId
              });
            });
            return files.thenEach(function(files, i) {
              user.topics[i].code.files = files;
              return response.send(user);
            }).done();
          });
        }
      });
    });
    app.post('/users', function(request, response) {
      var user;

      user = new User({
        name: request.body.name,
        _id: request.body._id,
        password: request.body.password,
        topics: request.body.topics
      });
      return user.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(user);
        }
      });
    });
    app.post('/login', function(request, response) {
      return User.findOne({
        _id: request.body._id
      }, function(err, user) {
        if (err != null) {
          return response.send(err);
        } else {
          if (user.password !== request.body.password) {
            return response.send("error");
          } else {
            return response.send("ok");
          }
        }
      });
    });
    app.post('/topics', function(request, response) {
      var topic;

      topic = new Topic({
        name: request.body.name,
        _id: request.body._id
      });
      return topic.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(topic);
        }
      });
    });
    app.get('/topics/:code', function(request, response) {
      return Topic.findOne({
        _id: request.params.code
      }, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/users/:login', function(request, response) {
      return User.findOne({
        _id: request.params.login
      }, function(err, user) {
        var topic, topics, _i, _len;

        if (err != null) {
          return response.send(err);
        } else {
          topics = request.body.topics;
          for (_i = 0, _len = topics.length; _i < _len; _i++) {
            topic = topics[_i];
            user.topics.addToSet(topic);
          }
          return response.send(user);
        }
      });
    });
    app.post('/files', function(request, response) {
      var file;

      file = new File({
        _id: request.body._id,
        path: request.body.path,
        name: request.body.name,
        owner: request.body.owner,
        topic: request.body.topic
      });
      return file.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(file);
        }
      });
    });
    app.get('/files/:code', function(request, response) {
      return File.findOne({
        _id: request.params.code
      }, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/questions', function(request, response) {
      var question;

      question = new Question({
        _id: request.body._id,
        owner: request.body.owner,
        filePosition: request.body.filePosition,
        file: request.body.file
      });
      return question.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(question);
        }
      });
    });
    app.get('/questions/:code', function(request, response) {
      return Question.findOne({
        _id: request.params.code
      }, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/answers', function(request, response) {
      var answer;

      answer = new Answer({
        _id: request.body._id,
        owner: request.body.owner,
        question: request.body.question,
        rank: request.body.rank
      });
      return answer.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(answer);
        }
      });
    });
    app.get('/answers/:code', function(request, response) {
      return Answer.findOne({
        _id: request.params.code
      }, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/commentsQ', function(request, response) {
      var comment;

      comment = new CommentQ({
        _id: request.body._id,
        owner: request.body.owner,
        question: request.body.question
      });
      return comment.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(comment);
        }
      });
    });
    app.get('/commentsQ/:code', function(request, response) {
      return CommentQ.find({
        _id: request.params.code
      }, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
    app.post('/commentsA', function(request, response) {
      var comment;

      comment = new CommentA({
        _id: request.body._id,
        owner: request.body.owner,
        answer: request.body.answer
      });
      return comment.save(function(err) {
        if (err != null) {
          return response.send(err);
        } else {
          return response.send(comment);
        }
      });
    });
    return app.get('/commentsA/:code', function(request, response) {
      return CommentA.find({
        _id: request.params.code
      }, function(err, docs) {
        if (err != null) {
          return response.send("not found");
        } else {
          return response.send(docs);
        }
      });
    });
  };

}).call(this);
